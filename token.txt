def parse_signal(text):
    """
    استخراج مقادیر موردنیاز از سیگنال و ذخیره در یک دیکشنری
    پشتیبانی از دو ساختار سیگنال:
    1. Futures (Free Signal)
    2. Free Signal (Futures)
    """
    # بررسی وجود یکی از دو ساختار سیگنال
    if not ("Futures (Free Signal)" in text or "#Free_signal" in text or "Free Signal (Futures)" in text):
        return None
    
    signal = {}
    try:
        # چاپ متن خام سیگنال برای دیباگ
        print(f"Raw signal text: {text}")
        
        # استخراج نوع معامله (SHORT یا LONG)
        type_match = re.search(r"(SHORT|LONG)", text, re.IGNORECASE)
        signal["type"] = type_match.group(1).upper() if type_match else None
        
        # استخراج نماد (مثل XRPUSDT یا PAXGUSDT)
        symbol_match = re.search(r"#(\w+/)", text)
        signal["symbol"] = symbol_match.group(1).replace("/", "") if symbol_match else None
        
        # استخراج قیمت دوم Entry Zone
        
        entry_zone = re.search(r"Entry\s*(?:zone)?\s*:\s*(\d+\.\d+)\s*-\s*(\d+\.\d+)", text, re.IGNORECASE)
        if entry_zone:
           if "Futures (Free Signal)" in text or "Free Signal (Futures)" in text:
              signal["entry_price"] = float(entry_zone.group(2))  # قیمت دوم برای Futures (Free Signal)
           else:
              signal["entry_price"] = float(entry_zone.group(1))  # قیمت اول برای بقیه
        else:
           signal["entry_price"] = None
        
        # استخراج تارگت‌ها (دومین تارگت)
        targets_section = re.search(r"Targets\s*:(.*?)(?:\nStop\s*(?:loss)?|\nLeverage|$)", text, re.DOTALL | re.IGNORECASE)
        if targets_section:
            targets_text = targets_section.group(1)
            # استخراج تمام اعداد اعشاری به عنوان تارگت‌ها
            all_targets = re.findall(r"\d+\.\d+", targets_text)
            signal["tp_price"] = float(all_targets[1]) if len(all_targets) >= 2 else None
        else:
            signal["tp_price"] = None
        
        # استخراج Stop Loss
        sl_match = re.search(r"Stop\s*(?:loss)?\s*:\s*([\d.]+)", text, re.IGNORECASE)
        signal["sl_price"] = float(sl_match.group(1)) if sl_match else None
        
        return signal
    except Exception as e:
        print(f"Error parsing signal: {e}")
        return None
