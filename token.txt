import subprocess
import os
from tkinter import Tk, Label, Button, Entry, Text, Scrollbar, END, VERTICAL, RIGHT, Y, BOTH, filedialog, messagebox

class GitManagerApp:
    def __init__(self, master):
        self.master = master
        master.title("مدیریت کامل گیت")
        master.geometry("800x600")

        # متغیرهای ذخیره اطلاعات
        self.repo_path = ""
        self.user_name = ""
        self.user_email = ""
        self.remote_url = ""

        # ایجاد ویجت‌ها
        self.create_widgets()

    def create_widgets(self):
        # بخش انتخاب پوشه
        self.path_label = Label(self.master, text="مسیر پروژه:")
        self.path_label.pack()

        self.path_entry = Entry(self.master, width=50)
        self.path_entry.pack()

        self.browse_button = Button(self.master, text="انتخاب پوشه", command=self.browse_folder)
        self.browse_button.pack()

        # بخش اطلاعات کاربر
        self.user_label = Label(self.master, text="اطلاعات کاربر گیت:")
        self.user_label.pack()

        self.name_label = Label(self.master, text="نام کاربر:")
        self.name_label.pack()
        self.name_entry = Entry(self.master, width=50)
        self.name_entry.pack()

        self.email_label = Label(self.master, text="ایمیل کاربر:")
        self.email_label.pack()
        self.email_entry = Entry(self.master, width=50)
        self.email_entry.pack()

        # بخش آدرس ریموت
        self.remote_label = Label(self.master, text="آدرس ریموت ریپازیتوری (اختیاری):")
        self.remote_label.pack()
        self.remote_entry = Entry(self.master, width=50)
        self.remote_entry.pack()

        # دکمه‌های عملیات
        self.init_button = Button(self.master, text="تنظیم اولیه گیت", command=self.git_init_setup)
        self.init_button.pack()

        self.commit_button = Button(self.master, text="کامیت تغییرات", command=self.git_commit)
        self.commit_button.pack()

        self.push_button = Button(self.master, text="Push به ریموت", command=self.git_push)
        self.push_button.pack()

        self.full_button = Button(self.master, text="اجرای تمام مراحل", command=self.run_all_steps)
        self.full_button.pack()

        # خروجی برنامه
        self.output_text = Text(self.master, height=20, wrap="word")
        self.scrollbar = Scrollbar(self.master, orient=VERTICAL, command=self.output_text.yview)
        self.output_text.configure(yscrollcommand=self.scrollbar.set)
        
        self.scrollbar.pack(side=RIGHT, fill=Y)
        self.output_text.pack(fill=BOTH, expand=True)

    def browse_folder(self):
        """پوشه پروژه را انتخاب می‌کند"""
        folder_selected = filedialog.askdirectory()
        if folder_selected:
            self.repo_path = folder_selected
            self.path_entry.delete(0, END)
            self.path_entry.insert(0, folder_selected)
            self.append_output(f"پوشه انتخاب شد: {folder_selected}")

    def append_output(self, text):
        """متن را به خروجی اضافه می‌کند"""
        self.output_text.insert(END, text + "\n")
        self.output_text.see(END)
        self.master.update()

    def run_command(self, command, cwd=None):
        """دستور را اجرا و نتیجه را برمی‌گرداند"""
        try:
            result = subprocess.run(command, cwd=cwd, capture_output=True, text=True, shell=True)
            return result
        except Exception as e:
            self.append_output(f"خطا در اجرای دستور: {str(e)}")
            return None

    def git_init_setup(self):
        """تنظیمات اولیه گیت را انجام می‌دهد"""
        if not self.validate_inputs():
            return

        # تنظیمات جهانی گیت
        self.append_output("\n=== تنظیمات جهانی گیت ===")
        self.user_name = self.name_entry.get()
        self.user_email = self.email_entry.get()
        
        result = self.run_command(f'git config --global user.name "{self.user_name}"')
        if result and result.returncode == 0:
            self.append_output("نام کاربر گیت با موفقیت تنظیم شد")
        
        result = self.run_command(f'git config --global user.email "{self.email_entry.get()}"')
        if result and result.returncode == 0:
            self.append_output("ایمیل کاربر گیت با موفقیت تنظیم شد")

        # مقداردهی اولیه ریپازیتوری
        self.append_output("\n=== مقداردهی اولیه ریپازیتوری ===")
        result = self.run_command("git init", self.repo_path)
        if result and result.returncode == 0:
            self.append_output("ریپازیتوری گیت با موفقیت ایجاد شد")
            self.append_output(result.stdout)

        # اضافه کردن ریموت اگر آدرس وارد شده باشد
        remote_url = self.remote_entry.get()
        if remote_url:
            self.append_output("\n=== تنظیم ریموت ===")
            result = self.run_command(f"git remote add origin {remote_url}", self.repo_path)
            if result and result.returncode == 0:
                self.append_output("ریموت با موفقیت تنظیم شد")
                self.remote_url = remote_url

    def git_commit(self):
        """تمام تغییرات را کامیت می‌کند"""
        if not self.validate_repo():
            return

        self.append_output("\n=== کامیت تغییرات ===")
        
        # اضافه کردن تمام فایل‌ها
        result = self.run_command("git add .", self.repo_path)
        if result and result.returncode == 0:
            self.append_output("تمام تغییرات به stage اضافه شدند")

        # کامیت تغییرات
        result = self.run_command('git commit -m "کامیت خودکار توسط برنامه مدیریت گیت"', self.repo_path)
        if result and result.returncode == 0:
            self.append_output("کامیت با موفقیت انجام شد")
            self.append_output(result.stdout)

    def git_push(self):
        """تغییرات را به ریموت push می‌کند"""
        if not self.validate_repo():
            return

        self.append_output("\n=== Push تغییرات ===")
        
        # دریافت آدرس ریموت اگر قبلا تنظیم نشده باشد
        if not self.remote_url:
            self.remote_url = self.remote_entry.get()
            if self.remote_url:
                result = self.run_command(f"git remote add origin {self.remote_url}", self.repo_path)
                if result and result.returncode == 0:
                    self.append_output("ریموت با موفقیت تنظیم شد")

        # اجرای دستور push
        result = self.run_command("git push -u origin master", self.repo_path)
        if result:
            if result.returncode == 0:
                self.append_output("Push با موفقیت انجام شد")
                self.append_output(result.stdout)
            else:
                self.append_output("خطا در انجام Push:")
                self.append_output(result.stderr)

    def run_all_steps(self):
        """تمام مراحل را به ترتیب اجرا می‌کند"""
        if not self.validate_inputs():
            return

        self.append_output("\n=== شروع فرآیند کامل مدیریت گیت ===")
        self.git_init_setup()
        self.git_commit()
        self.git_push()
        self.append_output("\n=== تمام مراحل با موفقیت انجام شد ===")

    def validate_inputs(self):
        """اعتبارسنجی ورودی‌ها"""
        self.repo_path = self.path_entry.get()
        if not self.repo_path or not os.path.isdir(self.repo_path):
            messagebox.showerror("خطا", "لطفا یک مسیر معتبر برای پروژه انتخاب کنید")
            return False

        if not self.name_entry.get() or not self.email_entry.get():
            messagebox.showerror("خطا", "لطفا نام و ایمیل کاربر گیت را وارد کنید")
            return False

        return True

    def validate_repo(self):
        """اعتبارسنجی ریپازیتوری"""
        if not self.repo_path:
            messagebox.showerror("خطا", "لطفا ابتدا مسیر پروژه را انتخاب کنید")
            return False

        if not os.path.exists(os.path.join(self.repo_path, '.git')):
            messagebox.showerror("خطا", "پوشه انتخاب شده یک ریپازیتوری گیت نیست")
            return False

        return True

# ایجاد پنجره اصلی
root = Tk()
app = GitManagerApp(root)
root.mainloop()